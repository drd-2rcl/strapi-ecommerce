{"version":3,"file":"static/webpack/static/development/pages/index.js.2fb223f14b7278f63936.hot-update.js","sources":["webpack:///./components/restaurant/restaurantList.js"],"sourcesContent":["import gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { graphql } from \"react-apollo\";\nimport { \n    Button, \n    Card, \n    CardBody, \n    CardColumns, \n    CardImg, \n    CardSubtitle \n} from \"reactstrap\";\nimport { CardText, CardTitle, Col, Row } from \"reactstrap\";\n\nconst RestaurantList = (\n    { data: { loading, error, restaurants }, search }, req) => {\n    if (error) return \"Error loading restaurants\";\n    // if restaurants are returned from the GraphQL query, run the filter query and set equal to variable restaurantSearch\n\n    if (restaurants && restaurants.length) {\n        // search query \n        const searchQuery = restaurants.filter(query =>\n        query.name.toLowerCase().include(search)\n        );\n        if ( searchQuery.lenght !=0 ) {\n            return (\n                <div>\n                    <div className=\"h-100\">\n                        {searchQuery.map(res => (\n                            <Card style={{ height: 250 }} src={`http://localhost:1337${res.image.url}`}>\n                                <CardImg \n                                    top={true} \n                                    style={{ height: 250 }} \n                                    src={`http://localhost:1337${res.image.url}`} \n                                />\n                                <CardBoy>\n                                    <CardTitle>{res.name}</CardTitle>\n                                    <CardText>{res.description}</CardText>\n                                </CardBoy>\n                                <div className=\"card-footer\">\n                                    <Link \n                                        as={`/restaurants/${res._id}`} \n                                        href={`/restaurants?id=${res._id}`}\n                                    >\n                                        <a className=\"btn btn-primary\">View</a>\n                                    </Link>\n                                </div>\n                            </Card> \n                        ))}\n                    </div>\n                    <style jsx global>\n                        {`\n                            a {\n                                color: white;\n                            }\n                            a:link {\n                                text-decoration: none;\n                                color: white;\n                            }\n                            a:hover {\n                                color: white;\n                            }\n                            .card-columns {\n                                column-count: 3;\n                            }\n                        `}\n                    </style>\n                </div>\n            );\n        } else {\n            return <h1>No Restaurants Found</h1>;\n        }\n    }\n    return <h1>Loading</h1>;\n};\n\nconst query = gql`\n    {\n        retaurants {\n            _id\n            name\n            description\n            image {\n                url\n            }\n        }\n    }\n`;\nRestaurantList.getInitialProps = async ({ req }) => {\n    const res = await fetch(\"https://api.github.com/repos/zeit/next.js\");\n    const json = await res.json();\n    return { stars: json.stargazers_count };\n};\n\n// The `graphql` wrapper executes a GraphQL query and makes the results available on the `data` prop of the wrapper component (RestaurantList)\n\nexport default graphql(query, {\n    props: ({ data }) => ({\n        data\n    })\n})(RestaurantList);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAFA;AAAA;AAAA;AAAA;AA2CA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAGA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;;;;A","sourceRoot":""}